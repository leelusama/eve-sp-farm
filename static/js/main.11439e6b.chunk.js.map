{"version":3,"sources":["components/SPCalculatorForm/AttributeInput.js","components/SPCalculatorForm/SPCalculatorForm.js","constants.js","components/App/App.js","index.js"],"names":["AttributeInput","props","label","name","defaultValue","Fragment","htmlFor","id","type","min","max","step","placeholder","required","className","SPCalculatorForm","omegaClone","primaryAttribute","secondaryAttribute","handleChange","onChange","handleSubmit","onSubmit","defaultChecked","plex","App","state","error","largeSkillInjectorPrice","skillExtractorPrice","plexPrice","bind","fetchs","push","fetch","Eve","then","response","json","data","last","pop","setState","average","Promise","all","catch","e","target","value","checked","this","Number","preventDefault","spPerMinute","spPerDay","spPerMonth","benefit","calculate","style","color","toFixed","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11439e6b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AttributeInput(props) {\r\n  const { label, name, defaultValue } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <label htmlFor={name}>{label}</label>\r\n      <br />\r\n      <input\r\n        id={name}\r\n        type='number'\r\n        name={name}\r\n        min='17'\r\n        max='100'\r\n        step='1'\r\n        placeholder='17 - 100'\r\n        required\r\n        defaultValue={defaultValue}\r\n      />\r\n      <span className='validity'></span>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AttributeInput;\r\n","import React from 'react';\r\nimport AttributeInput from './AttributeInput';\r\n\r\nfunction SPCalculatorForm(props) {\r\n  const {\r\n    omegaClone,\r\n    primaryAttribute,\r\n    secondaryAttribute,\r\n    onChange: handleChange,\r\n    onSubmit: handleSubmit,\r\n  } = props;\r\n\r\n  return (\r\n    <form onChange={handleChange} onSubmit={handleSubmit}>\r\n      <p>\r\n        <input\r\n          id='omegaClone'\r\n          type='checkbox'\r\n          name='omegaClone'\r\n          defaultChecked={omegaClone}\r\n        />\r\n        <label htmlFor='omegaClone'>Omega Clone</label>\r\n      </p>\r\n      <p>\r\n        <AttributeInput\r\n          name='primaryAttribute'\r\n          label='Primary Attribute'\r\n          defaultValue={primaryAttribute}\r\n        />\r\n      </p>\r\n      <p>\r\n        <AttributeInput\r\n          name='secondaryAttribute'\r\n          label='Secondary Attribute'\r\n          defaultValue={secondaryAttribute}\r\n        />\r\n      </p>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SPCalculatorForm;\r\n","export default {\r\n  region: {\r\n    'the forge': 10000002,\r\n  },\r\n  system: {\r\n    jita: 30000142,\r\n    perimeter: 30000144,\r\n  },\r\n  type: {\r\n    'large skill injector': 40520,\r\n    plex: 44992,\r\n    'skill extractor': 40519,\r\n  },\r\n};\r\n","import React from 'react';\r\nimport SPCalculatorForm from '../SPCalculatorForm';\r\nimport Eve from '../../constants';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: '',\r\n      omegaClone: true,\r\n      primaryAttribute: 32,\r\n      secondaryAttribute: 26,\r\n      largeSkillInjectorPrice: 736,\r\n      skillExtractorPrice: 289,\r\n      plexPrice: 2.609,\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const fetchs = [];\r\n    fetchs.push(\r\n      fetch(\r\n        `https://esi.evetech.net/latest/markets/${Eve.region['the forge']}/history/?datasource=tranquility&type_id=${Eve.type['large skill injector']}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const last = data.pop();\r\n          if (last) {\r\n            this.setState({\r\n              largeSkillInjectorPrice: last.average / 1000000,\r\n            });\r\n          }\r\n        })\r\n    );\r\n    fetchs.push(\r\n      fetch(\r\n        `https://esi.evetech.net/latest/markets/${Eve.region['the forge']}/history/?datasource=tranquility&type_id=${Eve.type['skill extractor']}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const last = data.pop();\r\n          if (last) {\r\n            this.setState({\r\n              skillExtractorPrice: last.average / 1000000,\r\n            });\r\n          }\r\n        })\r\n    );\r\n\r\n    fetchs.push(\r\n      fetch(\r\n        `https://esi.evetech.net/latest/markets/${Eve.region['the forge']}/history/?datasource=tranquility&type_id=${Eve.type['plex']}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const last = data.pop();\r\n          if (last) {\r\n            this.setState({\r\n              plexPrice: last.average / 1000000,\r\n            });\r\n          }\r\n        })\r\n    );\r\n\r\n    Promise.all(fetchs).catch(() =>\r\n      this.setState({ error: 'Did not get some prices. Check manually.' })\r\n    );\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { name, value, checked } = e.target;\r\n    switch (name) {\r\n      case 'omegaClone':\r\n        this.setState({ omegaClone: checked });\r\n        break;\r\n      case 'primaryAttribute':\r\n      case 'secondaryAttribute':\r\n      case 'largeSkillInjectorPrice':\r\n      case 'skillExtractorPrice':\r\n      case 'plexPrice':\r\n        this.setState({ [name]: Number(value) });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  calculate() {\r\n    const {\r\n      omegaClone,\r\n      primaryAttribute,\r\n      secondaryAttribute,\r\n      largeSkillInjectorPrice,\r\n      skillExtractorPrice,\r\n      plexPrice,\r\n    } = this.state;\r\n\r\n    const omegaMod = omegaClone ? 1 : 0.5;\r\n    const spPerMinute =\r\n      (primaryAttribute + secondaryAttribute * 0.5) * omegaMod;\r\n    const spPerDay = spPerMinute * 60 * 24;\r\n    const spPerMonth = spPerDay * 30;\r\n\r\n    const injectorsPerMonth = spPerMonth / (500 * 1000);\r\n\r\n    const benefit =\r\n      (largeSkillInjectorPrice - skillExtractorPrice) * injectorsPerMonth -\r\n      plexPrice * 500;\r\n\r\n    return { spPerMinute, spPerDay, spPerMonth, benefit };\r\n  }\r\n  render() {\r\n    const { omegaClone, primaryAttribute, secondaryAttribute } = this.state;\r\n    const { spPerMinute, spPerDay, spPerMonth, benefit } = this.calculate();\r\n\r\n    return (\r\n      <div>\r\n        <h1>App</h1>\r\n        <div className='attention'>\r\n          <span className='attention__icon'>âš </span> the price is taken from the\r\n          average of history\r\n        </div>\r\n        {this.state.error && <p style={{ color: 'red' }}>{this.state.error}</p>}\r\n        <p>SP/minute = {spPerMinute}</p>\r\n        <p>SP/day = {spPerDay}</p>\r\n        <p>SP/month = {spPerMonth}</p>\r\n        <p>Benefit = {benefit.toFixed()}</p>\r\n        <SPCalculatorForm\r\n          omegaClone={omegaClone}\r\n          primaryAttribute={primaryAttribute}\r\n          secondaryAttribute={secondaryAttribute}\r\n          onChange={this.handleChange}\r\n          onSubmit={this.handleSubmit}\r\n        />\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <fieldset>\r\n            <legend>Prices (millions):</legend>\r\n            <p>\r\n              <label htmlFor='largeSkillInjectorPrice'>\r\n                Large Skill Injector:\r\n              </label>\r\n              <input\r\n                id='largeSkillInjectorPrice'\r\n                type='number'\r\n                name='largeSkillInjectorPrice'\r\n                value={this.state.largeSkillInjectorPrice}\r\n                onChange={this.handleChange}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor='skillExtractorPrice'>Skill Extractor:</label>\r\n              <input\r\n                id='skillExtractorPrice'\r\n                type='number'\r\n                name='skillExtractorPrice'\r\n                value={this.state.skillExtractorPrice}\r\n                onChange={this.handleChange}\r\n              />\r\n            </p>\r\n            <p>\r\n              <label htmlFor='plexPrice'>Plex:</label>\r\n              <input\r\n                id='plexPrice'\r\n                type='number'\r\n                name='plexPrice'\r\n                value={this.state.plexPrice}\r\n                onChange={this.handleChange}\r\n              />\r\n            </p>\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}